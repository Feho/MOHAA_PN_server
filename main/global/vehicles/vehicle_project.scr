/**
 * Projette un véhicule dans les airs suite à son explosion
 *
 * @param angles local.startAngles Angles auxquels le modèle doit se repositionner à la fin de l'animation
 * @param int|float local.projectionLevel Niveau de projection (1 = normal)
 *
 * Dépendances :
 * - global/functions.scr
 */
main local.startAngles local.projectionLevel:

	self physics_on
	self gravity 1.2
	self.startOrigin = self.origin

	local.absoluteValue = 50 * local.projectionLevel
	local.velocityY = waitthread global/functions.scr::RandomInteger -local.absoluteValue local.absoluteValue
	local.velocityX = waitthread global/functions.scr::RandomInteger -local.absoluteValue local.absoluteValue
	local.velocityZ = randomint(250) + 250 * local.projectionLevel

	// Fait décoller le véhicule
	self.velocity = (local.velocityX local.velocityY local.velocityZ)

	waitframe

	// Donne des angles aléatoires au véhicule
	local.randX = waitthread global/functions.scr::RandomInteger -(25 * local.projectionLevel) (25 * local.projectionLevel)
	local.randY = waitthread global/functions.scr::RandomInteger -(15 * local.projectionLevel) (15 * local.projectionLevel)
	local.randZ = waitthread global/functions.scr::RandomInteger -(25 * local.projectionLevel) (25 * local.projectionLevel)
	local.x = waitthread global/functions.scr::ConvertAngleBetween0And360Excluded (self.angles[0] + local.randX)
	local.y = waitthread global/functions.scr::ConvertAngleBetween0And360Excluded (self.angles[1] + local.randY)
	local.z = waitthread global/functions.scr::ConvertAngleBetween0And360Excluded (self.angles[2] + local.randZ)

	self thread global/functions.scr::MoveToAngles (local.x local.y local.z) 15

	// Attend que le véhicule ai retouché le sol
	while (self.velocity[2] >= 0)
		waitframe

	while (self.velocity[2] < 0)
		waitframe

	// Aligne le véhicule avec le sol
	self thread global/functions.scr::MoveToAngles (local.startAngles[0] local.y local.startAngles[2]) 12

end