/*
======================================================
*** AIRborne; Control Centre for MoH:AA
======================================================
by Sor
Version: v2.0.2
-----------------------------------
--- COPY/EDIT:

 A) All files related to the Airborne Server for MoHAA
 are free to be modified in any proportion. For any reason.
 Mods can always be made better :)

 B) Keep this heading in this file in any case (modified/original)
 and if you wish, add your own nickname/contact underneath it.

 C) If you changed the files in any way, please state so clearly
 when releasing it to the public. I also recommend: marking
 or mentioning what you changed exactly in the modified files.

 Feel free to ask me any help regarding problems/bugs
 when playing this Mod or regarding the modification this Mod.

-------------------
DO NOT TAKE CREDIT FOR OTHER PEOPLE'S WORK!
EITHER SUBMIT MODIFIED/ORIGINAL WORK WITHOUT CREDIT
OR JUST CREDIT Rindog.
---------------------------------------------
--- CONTACT:
E-Mail: 	MOHAALennySoldier@hotmail.com
Webs: 	www.mods-r-us.net | www.mohaairborne.co.cc
======================================================
*/

// TODO: Help command which prints all help text in the console
// TODO: Finish library
init:

	level.AIR_global_init = 1

	println "[AIR Init::STARTED]: Starting AIR System initialization, standby..."

	// load all settings if necessary
	waitthread global/AIR/AIR_Settings.scr::main_settings
	waitthread global/AIR/AIR_Settings.scr::script_settings
	waitthread global/AIR/AIR_Settings.scr::map_settings

	thread clear_hud

	if (level.AIR == NIL)
	{
		println "[AIR Init::Fatal Error]: The AIR settings weren't properly loaded!!"
		end
	}
	else
	{
		println "[AIR Init]: Settings have loaded successfully."
	}

	if ( (getcvar "AIR_sv") != "" )
	{
		println "[AIR Init::Backup_to_level]: Backup cvar returns latest values to level.AIR var..."
		waitthread return_fromcvar
	}

	//*********************//
	level waittill prespawn
	//*********************//

	// register user's cmds & initialize the Command-Service
	if ( level.AIR["cmd"] == 1)
	{
 		local.cmds = waitthread global/AIR/AIR_Settings.scr::register_user_cmds
		for (local.i = 1; local.i <= local.cmds.size; local.i++)
		{
			if (local.cmds[local.i][4] == NIL)
				waitthread register_cmd local.cmds[local.i][1] local.cmds[local.i][2] local.cmds[local.i][3]
			else
				waitthread register_cmd local.cmds[local.i][1] local.cmds[local.i][2] local.cmds[local.i][3] local.cmds[local.i][4]
		}
		thread cmd_handler
	}

	// register all spectator messages
	if ( level.AIR["spec_messages"] == 1 )
	{
		local.msgs = waitthread global/AIR/AIR_Settings.scr::add_user_specmsg
		for (local.i = 1; local.i <= local.msgs.size; local.i++)
		{
			if (local.msgs[local.i][2] == NIL)
				local.msgs[local.i][2] = 0

			waitthread global/AIR/AIR_messages.scr::add_message local.msgs[local.i][1] local.msgs[local.i][2] local.msgs[local.i][3]
		}
		
		println "[AIR Init]: Registered all SPECTATOR messages!"

		exec global/AIR/AIR_messages.scr
	}

	// register all global messages
	if ( level.AIR["gmessages"] == 1 )
	{
		local.gmsg = waitthread global/AIR/AIR_Settings.scr::add_user_globalmsg
		for (local.c = 1; local.c <= local.gmsg.size; local.c++)
		{
			if (local.gmsg[local.c][2] == NIL)
				local.gmsg[local.c][2] = 0

			waitthread global/AIR/AIR_gmessages.scr::add_message local.gmsg[local.c][1] local.gmsg[local.c][2] 
		}
		
		println "[AIR Init]: Registered all GLOBAL messages!"

		exec global/AIR/AIR_gmessages.scr
	}

	if ( level.AIR["RANK_system"] == 1)
		exec global/rank/ranking.scr

	//******************//
	level waittill spawn
	//******************//

	level.dmrespawning = 1

	if ( level.AIR["weapon_limiter"] == 1)
	{
		thread global/limits.txt::banned
		thread global/limits.txt::limited
		thread global/limits.txt::bonuses
	}

	if (level.AIR_mapscript == NIL)
		level.AIR_mapscript = waitexec global/strings.scr::to_lower (getcvar "mapname")

	if ( level.AIR["realism"] == 1)
	{
		exec global/AIR_view.scr
	}

	if ( level.AIR["SP_soundfix"] == 1)
		exec global/SPFIX_/soundfix.scr::init

	if ( level.AIR["balance"] == 1)
		exec global/AIR/AIR_TeamBalance.scr

	if ( level.AIR["LOC_library"] == 1)
	{
		thread global/AIR/AIR_library.scr::load_library
	}

	if ( level.AIR["spawn_protect"] == 1)
		println "[AIR Spawn Protect]: Spawn protection enabled!"

	if ( level.AIR["nextmap_display"] == 1)
	{
		println "[AIR Nextmap]: Nextmap Display enabled!"
		println "[AIR Init::FINISHED]: Initialization completed!"
		exec global/AIR/AIR_nextmap.scr
	}
	else
	{
		println "[AIR Init::FINISHED]: Initialization completed!"
	}


end

clear_hud:

	for (local.i = 0; local.i <= 255; local.i++)
	{
		huddraw_alpha local.i 0.0
	}

	//make sure
	for (local.i = 40; local.i <= 150; local.i++)
	{
		huddraw_alpha local.i 0.0
	}
end

///////////////////////////////////////////////////////////////////////////////////
// Add setting to Cvar
// --------------------
// PURPOSE: Used to save settings of internal variables in an persistent cvar.
// USE: waitthread global/AIR/AIR_Control.scr::add_tocvar <"setting"> <value>
//
// CLARIFICATION:
// - "setting": Find all applicable settings in the /AIR/AIR_Settings.scr Script
// - value: Find all applicable values in the /AIR/AIR_Settings.scr Script
//
///////////////////////////////////////////////////////////////////////////////////
add_tocvar local.option local.value:

	if ( (getcvar "AIR_sv") != "")
		group.method = "add"
	else
		group.method = "start"

	if (group.method == "add")
	{
		local.reg_value = waitthread get_fromcvar local.option
		println local.reg_value
		if (local.reg_value == local.value)
		{
			end
		}
		else if (local.reg_value != NIL)
		{
			local.cib =  waitexec global/strings.scr::split_line (getcvar "AIR_sv") 1 " "
	
			for (local.i = 1; local.i <= local.cib[1].size && local.stop != 1; local.i++)
			{
				if (local.cib[1][local.i] == local.option)
				{
					local.tobe_replaced = (local.option + " " + local.cib[1][(local.i + 1)] + " ; ")
					local.stop = 1
				}
			}

			local.replaced_with = (local.option + " " + local.value + " ; ")
			local.newcvar = waitexec global/strings.scr::Replace (getcvar "AIR_sv") local.tobe_replaced local.replaced_with
			setcvar "AIR_sv" local.newcvar
			end
		}
		else
		{
			local.cvar = (getcvar "AIR_sv")
			local.newcvar = local.cvar + (local.option + " " + local.value + " ; ")
			setcvar "AIR_sv" local.newcvar
			end
		}
	}
	else
	{
		setcvar "AIR_sv" (local.option + " " + local.value + " ; ")
	}
end

///////////////////////////////////////////////////////////////////////////////////
// Get value from Cvar
// --------------------
// PURPOSE: Retrieves a saved value for an internal variable  in the persistant cvar.
// USE: waitthread global/AIR/AIR_Control.scr::get_fromcvar <"setting">
//
// CLARIFICATION:
// - "setting": Find all applicable settings in the /AIR/AIR_Settings.scr Script
//
///////////////////////////////////////////////////////////////////////////////////
get_fromcvar local.option:

	if ( (getcvar "AIR_sv") == "")
		end

	local.cib =  waitexec global/strings.scr::split_line (getcvar "AIR_sv") 1 " "

	for (local.i = 1; local.i <= local.cib[1].size; local.i++)
	{
		if (local.cib[1][local.i] == local.option)
		{
			local.v = local.cib[1][(local.i + 1)]
			local.value = waitexec global/AIR/AIR_Control.scr::correct_type local.option local.v
			local.checked_value = waitexec global/AIR/AIR_Control.scr::check_value local.option local.value
			if (local.checked_value == 1)
			{
				end local.value
			}
			else
			{
				end NIL
			}
		}
	}
end

/////////////////////////////////////////////////////////////////
// Record Values to Cvar
// --------------------
// PURPOSE: Saves all necessary values of internal variables
// USE: waitthread global/AIR/AIR_Control.scr::record_tocvar
//
/////////////////////////////////////////////////////////////////
record_tocvar:

	if (level.AIR == NIL)
		end

	setcvar "AIR_sv" ""

	local.o = makeArray
	"gmessages"
	"spec_messages"
	"camper_message"
	"camper_sound"
	"cmd"
	"camper"
	"camper_punish"
	"balance"
	"camper_radius"
	"balance_time"
	"camper_time"
	"weapon_limiter"
	"music"
	"realism"
	"LOC_library"
	"nextmap_display"
	"spawn_protect"
	"RANK_system"
	"SP_soundfix"
	"spawn_protect_sec"
	endArray

	local.string = ""

	for (local.i = 1; local.i <= local.o.size; local.i++)
	{
		local.t = local.o[local.i][1]
		local.string += (local.t + " " + level.AIR[local.t] + " ; ")
	}

	setcvar "AIR_sv" local.string

end

////////////////////////////////////////////////////////////////////////////
// Return Values to Cvar
// --------------------
// PURPOSE: Returns all saved values to the cvar to their level. variables
// USE: waitthread global/AIR/AIR_Control.scr::return_fromcvar
//
////////////////////////////////////////////////////////////////////////////
return_fromcvar:

	if ( (getcvar "AIR_sv") == "")
		end

	local.cib =  waitexec global/strings.scr::split_line (getcvar "AIR_sv") 1 " "
	
	for (local.i = 1; local.i <= local.cib[1].size; local.i++)
	{
		if (local.cib[1][local.i] == ";")
		{
			local.option = local.cib[1][(local.i - 2)]
			local.v = local.cib[1][(local.i - 1)]
			local.value = waitexec global/AIR/AIR_Control.scr::correct_type local.option local.v
			local.checked_value = waitexec global/AIR/AIR_Control.scr::check_value local.option local.value

			if (local.checked_value == 1)
			{
				if (level.AIR[local.option] == local.value)
				{
					local.tobe_replaced = (local.option + " " + local.v + " ; ")
					local.replaced_with = ""

					local.newcvar = waitexec global/strings.scr::Replace (getcvar "AIR_sv") local.tobe_replaced local.replaced_with
					setcvar "AIR_sv" local.newcvar
				}
				else
				{
					level.AIR[local.option] = local.value
				}
			}
		}
	}
end


//////////////////////////////////////////////////////////////////////////////////////////////////
// Apply Settings
// --------------
// PURPOSE: Used to apply settings to internal variables used in running scripts.
// USE: waitthread global/AIR/AIR_Control.scr::apply_setting <"setting"> <value>
//
// CLARIFICATION:
// - "setting": Find all applicable settings in the /AIR/AIR_Settings.scr Script
// - value: Find all applicable values in the /AIR/AIR_Settings.scr Script
//
// NOTE: This should only be used by the Server Command-Service
//
//////////////////////////////////////////////////////////////////////////////////////////////////
apply_setting local.setting local.value:

	if (level.AIR == NIL)
	{
		waitthread global/AIR/AIR_Settings.scr::main_settings
		waitthread global/AIR/AIR_Settings.scr::script_settings
		waitthread global/AIR/AIR_Settings.scr::map_settings
	}

	if (local.setting == NIL || local.setting == "")
	{
		end
	}

	if (level.AIR[local.setting] == NIL)
	{
		println "[AIR Control::apply_setting]: Setting does not exist!"
		end
	}

	//make sure we got an the correct type (integer/float):
	local.value = waitthread correct_type local.setting local.value

	//make sure we got a correct value
	local.check = waitthread check_value local.setting local.value

	if (local.check == NIL)
	{
		println "[AIR Control::apply_setting]: Invalid value!!"
		end
	}

	level.AIR[local.setting] = local.value

	println ("[AIR Control::apply_setting]: " + local.setting + " successfully set to " + local.value + "!")

	thread add_tocvar local.setting local.value
end

//////////////////////////////////////////////////////////////////////////////////////////////////
// Get Settings
// ------------
// PURPOSE: Used by internal scripts to get the most updated setting.
// USE: waitthread global/AIR/AIR_Control.scr::get_setting <"setting">
//
// CLARIFICATION:
// - "setting": Find all applicable settings in the /AIR/AIR_Settings.scr Script
//
//
// NOTE: This should only be used by the Server Command-Service
//
//////////////////////////////////////////////////////////////////////////////////////////////////
get_setting local.setting:

	if (level.AIR == NIL)
	{
		waitthread global/AIR/AIR_Settings.scr::main_settings
		waitthread global/AIR/AIR_Settings.scr::script_settings
		waitthread global/AIR/AIR_Settings.scr::map_settings
	}

	if (local.setting == NIL || local.setting == "")
	{
		end NIL
	}

	if (level.AIR[local.setting] == NIL)
	{
		println "[AIR Control::get_settings]: Setting does not exist!"
		end NIL
	}
	else if (level.AIR[local.setting] != NIL)
	{
		end level.AIR[local.setting]
	}
end NIL

//////////////////////////////////////////////////////////////////////////////////////////////////
// Get Map Settings
// -----------------
// PURPOSE: Used by internal scripts to get the most updated mod and mode settings for maps
// USE: waitthread global/AIR/AIR_Control.scr::get_msetting <"setting">
//
// CLARIFICATION:
// - "setting": Find all applicable settings in the /AIR/AIR_Settings.scr Script
//
//
// NOTE: This should only be used by the Server Command-Service
//
//////////////////////////////////////////////////////////////////////////////////////////////////
get_msetting local.setting:

	if (level.AIR_maps == NIL)
	{
		waitthread global/AIR/AIR_Settings.scr::map_settings
	}

	if (local.setting == NIL || local.setting == "")
	{
		end NIL
	}

	if (level.AIR_maps[local.setting] == NIL)
	{
		println "[AIR Control::get_msettings]: Setting does not exist!"
		end NIL
	}

	else if (level.AIR_maps[local.setting] != NIL)
	{
		end level.AIR_maps[local.setting]
	}
end NIL

/////////////////////////////////////////////////////////////////////////
// Check Value
// ------------
// Check if the correct value is being applied to a setting!
// 
/////////////////////////////////////////////////////////////////////////
check_value local.setting local.value:

	switch (local.setting)
	{
		case "gmessages":
		case "spec_messages":
		case "camper_message":
		case "camper_sound":
		case "cmd":
		case "camper":
		case "balance":
		case "weapon_limiter":
		case "music":
		case "realism":
		case "LOC_library":
		case "nextmap_display":
		case "spawn_protect":
		case "RANK_system":
		case "SP_soundfix":
			if (local.value != 0 && local.value != 1)
			{
				end NIL
			}
		break
		case "balance_time":
		case "camper_time":
		case "spawn_protect_sec":
			if (local.value < 0.05)
			{
				end NIL
			}
		break
		case "camper_radius":
			if (local.value < 20)
			{
				end NIL
			}
		break
		case "camper_punish":
			if (local.value != 0 && local.value != 1 && local.value != 2 && local.value != 3 && local.value != 4)
			{
				end NIL
			}
		break
	}

end 1

/////////////////////////////////////////////////////////////////////////
// Check Type
// ------------
// Check if the correct value-type is being applied to a setting!
// 
/////////////////////////////////////////////////////////////////////////
correct_type local.setting local.value:

	switch (local.setting)
	{
		case "gmessages":
		case "spec_messages":
		case "camper_message":
		case "camper_sound":
		case "cmd":
		case "camper":
		case "camper_punish":
		case "balance":
		case "weapon_limiter":
		case "music":
		case "realism":
		case "LOC_library":
		case "nextmap_display":
		case "spawn_protect":
		case "RANK_system":
		case "SP_soundfix":
			local.correct = int (local.value)
			end local.correct
		break
		case "camper_radius":
		case "balance_time":
		case "camper_time":
		case "spawn_protect_sec":
			local.correct = float (local.value)
			end local.correct
		break
	}

end


//////////////////////////////////////////////////////////////////////////////////////////////////
// Register Commands
// -----------------
// PURPOSE: By registering a command, you can use it to activate a specified script in the 
//		console. More user-friendly info -> AIR_Settings.scr
//
// USE: waitthread global/AIR/AIR_Control.scr::register_cmd <"cmd"> <"script"> <"wait"> <"feedback">
//
// CLARIFICATION:
// - "cmd": 	Name of the command
// - script: 	Filename of script, you can also specify a thread within the script. (NO STRING)
// - "wait": 	Must the game use waitthread/waitexec? 1 yes, 0 no
// - "feedback": 	OPTIONAL: This gets printed in the console when this command is activated.
//
//////////////////////////////////////////////////////////////////////////////////////////////////
register_cmd local.cmd local.file local.wait local.feedback:

	if (local.cmd == NIL || local.cmd == "")
	{
		println "[AIR Control::register_cmd]: Invalid command string!"
		end
	}

	if (local.file == NIL || local.file == "")
	{
		println "[AIR Control::register_cmd]: Invalid scriptfile string!"
		end
	}

	if (local.wait == NIL)
	{
		local.wait = "0"
	}


	if (level.AIR_reg == NIL)
		local.i = 1
	else
		local.i = level.AIR_reg.size + 1

	level.AIR_reg[local.i][1] = local.cmd
	level.AIR_reg[local.i][2] = local.file
	level.AIR_reg[local.i][3] = local.wait
	if (local.feedback != NIL)
	{
		level.AIR_reg[local.i][4] = local.feedback
	}

	println ("[AIR Control::register_cmd]: " + local.cmd + " successfully registered!")

end


//////////////////////////////////////////////////////////////////////////////////////////////////
// UnRegister Commands
// -------------------
// PURPOSE: To unregister registered commands
//
// USE: waitthread global/AIR/AIR_Control.scr::unregister_cmd <"cmd">
//
// CLARIFICATION:
// - "cmd": Use the same string for cmd like the one you used to register
//
// Unfound commands will result in an error
//
//////////////////////////////////////////////////////////////////////////////////////////////////
unregister_cmd local.cmd:
	
	if (level.AIR_reg == NIL)
	{
		println "[AIR Control::Unregister_cmd]: Register is empty, cannot unregister specified command!"
		end
	}

	if (local.cmd == NIL || local.cmd == "")
	{
		println "[AIR Control::Unregister_cmd]: Invalid command string!"
		end
	}

	for (local.b = 1; local.b <= level.AIR_reg.size; local.b++)
	{
			if (level.AIR_reg[local.b][1] == local.cmd)
			{
				level.AIR_reg[local.b] = NIL
				local.unregistered = 1
			}
	}

	if (local.unregistered == 1)
	{
		println ("[AIR Control::Unregister_cmd]: " + local.cmd + " successfully unregistered!")
	}
	else
	{
		println ("[AIR Control::Unregister_cmd]: " + local.cmd + " not found in the register!")
	}

end


//////////////////////////////////////////////////////////////////////////////////////////////////
// Dump All Commands
// -----------------
// PURPOSE: Dump all registered commands in the console!
//
// USE: waitthread global/AIR/AIR_Control.scr::dumpall_cmd
//
//////////////////////////////////////////////////////////////////////////////////////////////////
dumpall_cmd:

	if (level.AIR_reg == NIL)
	{
		println "[AIR Control::dumpall_cmd]: Register is empty, cannot dump information!"
		end
	}	

	println "****************"
	println "[AIR Control::Dumpall_cmd]: Dumping all Register contents into the console!"
	println "****************"	
	println " "
	println " "

	for (local.e = 1; local.e <= level.AIR_reg.size; local.e++)
	{
		println "---------------------------------------------------------------------"
		println "Dumping Entry " local.e
		println "Command: " level.AIR_reg[local.e][1]
		//println "Scriptfile: " level.AIR_reg[local.e][2]
		if (level.AIR_reg[local.e][3] == "1")
		{
			println "Type waitexec"
		}
		else
		{
			println "Type exec"
		}
		if (level.AIR_reg[local.e][4] != NIL)
		{
			println "Console Feedback: " level.AIR_reg[local.e][4]
		}
	}

	println "---------------------------------------------------------------------"
	println " "
	println " "
	println "****************"
	println "[AIR Control::Dumpall_cmd]: Dumping Completed!"
	println "****************"	

end

//////////////////////////////////////////////////////////////////////////////////////////////////
// Dump One Command
// ----------------
// PURPOSE: Dump all info about the specified command into the console
//
// USE: waitthread global/AIR/AIR_Control.scr::dumpone_cmd <"cmd">
//
//////////////////////////////////////////////////////////////////////////////////////////////////
dumpone_cmd local.cmd:

	if (level.AIR_reg == NIL)
	{
		println "[AIR Control::dumpone_cmd]: Register is empty, cannot dump information!"
		end
	}

	if (local.cmd == NIL || local.cmd == "")
	{
		println "[AIR Control::dumpone_cmd]: Invalid command string!"
		end
	}


	for (local.a = 1; local.a <= level.AIR_reg.size; local.a++)
	{
		if (level.AIR_reg[local.a][1] == local.cmd)
		{
			println "---------------------------------------------------------------------"
			println "Dumping Entry " local.a
			println "Command: " level.AIR_reg[local.a][1]
			//println "Scriptfile: " level.AIR_reg[local.a][2]
			if (level.AIR_reg[local.a][3] == "1")
			{
				println "Type waitexec"
			}
			else
			{
				println "Type exec"
			}
			if (level.AIR_reg[local.a][4] != NIL)
			{
				println "Console Feedback: " level.AIR_reg[local.a][4]
			}
			println "---------------------------------------------------------------------"
			local.dumped = 1
		}
	}

	if (local.dumped == 1)
	{
		println ("[AIR Control::dumpone_cmd]: " + local.cmd + " successfully dumped!")
	}
	else
	{
		println ("[AIR Control::dumpone_cmd]: " + local.cmd + " not found in the register!")
	}
		
end

//////////////////////////////////////////////////////////////////////////////////////////////////
// Clear Register
// --------------
// PURPOSE: Clear all entries from the register!
//
// USE: waitthread global/AIR/AIR_Control.scr::clear_cmd <backup>
//
//////////////////////////////////////////////////////////////////////////////////////////////////
clear_cmd local.bu:

	if (level.AIR_reg == NIL)
	{
		println "[AIR Control::clear_cmd]: Register is empty, cannot erase information!"
		end
	}

	if (local.bu == 1)
	{
		if (level.AIR_rereg == NIL)
		{
			level.AIR_rereg = level.AIR_reg
		}
		else
		{
			local.c = level.AIR_rereg.size
			for (local.i = 1; local.i <= level.AIR_reg.size; local.i++)
			{
				level.AIR_rereg[(local.c + local.i)] = level.AIR_reg[local.i]
			}
		}

		waitframe
	}
		
	level.AIR_reg = NIL

	println "[AIR Control::clear_cmd]: Register successfully cleared!"

end

//////////////////////////////////////////////////////////////////////////////////////////////////
// Clear Register Entry
// ---------------------
// PURPOSE: Clear one entry from the register!
//
// USE: waitthread global/AIR/AIR_Control.scr::clear_one_cmd <"cmd"> <backup>
//
//////////////////////////////////////////////////////////////////////////////////////////////////
clear_one_cmd local.cmd local.bu:

	if (level.AIR_reg == NIL)
	{
		println "[AIR Control::clear_one_cmd]: Register is empty, cannot erase information!"
		end
	}

	for (local.i = 1; local.i <= level.AIR_reg.size; local.i++)
	{
		if (level.AIR_reg[local.i][1] == local.cmd)
		{
			if (local.bu == 1)
			{
				if (level.AIR_rereg == NIL)
					local.c = 1
				else
					local.c = ( level.AIR_rereg.size + 1 )
				
				level.AIR_rereg[local.c] = level.AIR_reg[local.i]
				waitframe
			}
			
			level.AIR_reg[local.i] = NIL
			local.clear = 1
			break
		}
	}

	if (local.clear == 1)
	{
		println ("[AIR Control::clear_cmd]: Entry " + local.cmd + " successfully cleared!")
	}

end


//////////////////////////////////////////////////////////////////////////////////////////////////
// Reregister Cleared Entry
// -------------------------
// PURPOSE: Reregister an entry you cleared earlier. This only works if the backup option
// 		was turned on when you cleared it.
//
// USE: waitthread global/AIR/AIR_Control.scr::reregister_one <"cmd">
//
//////////////////////////////////////////////////////////////////////////////////////////////////
reregister_one local.cmd:

	if (level.AIR_rereg == NIL)
	{
		println "[AIR Control::reregister_one]: Backup Register is empty!"
		println "[AIR Control::reregister_one]: Are you sure you turned on the backup option when you cleared the specified entry?"
		end
	}

	for (local.i = 1; local.i <= level.AIR_rereg.size; local.i++)
	{
		if (level.AIR_rereg[local.i][1] == local.cmd)
		{
			local.match = 1
			if (level.AIR_rereg[local.i].size == 3)
			 	waitthread global/AIR/AIR_Control.scr::register_cmd level.AIR_rereg[local.i][1] level.AIR_rereg[local.i][2] level.AIR_rereg[local.i][3]
			else if (level.AIR_rereg[local.i].size == 4)
				waitthread global/AIR/AIR_Control.scr::register_cmd level.AIR_rereg[local.i][1] level.AIR_rereg[local.i][2] level.AIR_rereg[local.i][3] level.AIR_rereg[local.i][4]
		
			level.AIR_rereg[local.i] = NIL
			break
		}
	}

	if (local.match == 1)
	{
		println ("[AIR Control::clear_cmd]: Entry " + local.cmd + " successfully reregistered!")
	}

end

///////////////////////////////////////////////////////////////////////////////
// Restart Function
// ------------------
// PURPOSE: Restarts the current map.
//
// USE: thread global/AIR/AIR_Control.scr::safe_restart_function
//
//////////////////////////////////////////////////////////////////////////////
safe_restart_function:

	level.global_maprestart["delay"] = 0.1
	level.global_maprestart["display"] = 0
	exec global/win.scr::maprestart
end

mytest:

	setcvar "g_gametype" "4"
	wait 1
	teamwin "axis"
end

// ********************************************************************************************	//
//																//
//		     			   AIR Command Script - Don't Change					//
//																//
// ********************************************************************************************	//

// --------------------------------------------------------	//
cmd_handler:
// --------------------------------------------------------	//

setcvar "AIR_cmd" ""
//waitthread global/AIR/AIR_Settings.scr::register_user_cmds

level waittill spawn
wait 3
println "[AIR Cmd::Command_Service]: Server Command-Service initialized and running!"

local.cmd_h = waitthread get_setting "cmd"

while(local.cmd_h == 1)
{

	local.AIR_cmd = getcvar("AIR_cmd")
	local.cmd_h = level.AIR["cmd"]

	if (local.AIR_cmd != "")
	{
		// Parse Command information
		local.command = waitexec global/strings.scr::split_line local.AIR_cmd 1 " "

		// Convert Command to lower case characters - just in case
		local.command[1][1] = waitexec global/strings.scr::to_lower local.command[1][1]

		if (local.command != NIL)
		{
			///////////////////////////////////
			// Parsing command
			// ----------
			// Stock commands first
			///////////////////////////////////

			switch (local.command[1][1])
			{
			case "balance":
				if (local.command[1][2] == "1" || local.command[1][2] == "0")
				{
					setcvar "AIR_cmd" ""
					local.integer = int(local.command[1][2])
					waitthread apply_setting local.command[1][1] local.integer
				
					if (local.integer == 1 && level.balance_running != 1)
					{
						exec global/AIR/AIR_TeamBalance.scr
					}
				}
				else
				{
					setcvar "AIR_cmd" ""
					println "[AIR Cmd::TeamBalance]: Invalid value! Turn TeamBalance 1 (on) or 0 (off)!"
				}
			break
			case "balance_time":

				local.num = float(local.command[1][2])
				if (local.num > 0.05)
				{
					setcvar "AIR_cmd" ""
					local.integer = float(local.command[1][2])
					waitthread apply_setting local.command[1][1] local.integer
				}
				else
				{
					setcvar "AIR_cmd" ""
					println "[AIR Cmd::TeamBalance_Time]: Invalid value! TeamBalance-check time can't be negative or less than a frame(0.05)!"
				}
			break
			case "gmessages":

				if (local.command[1][2] == "1" || local.command[1][2] == "0")
				{
					setcvar "AIR_cmd" ""
					local.integer = int(local.command[1][2])
					waitthread apply_setting local.command[1][1] local.integer

					if (local.integer == 1 && level.gmessages_running != 1)
					{
						exec global/AIR/AIR_gmessages.scr
					}
				}
				else
				{
					setcvar "AIR_cmd" ""
					println "[AIR Cmd::Global_Messages]: Invalid value! Turn Global Messages 1 (on) or 0 (off)!"
				}
			break
			case "spec_messages":

				if (local.command[1][2] == "1" || local.command[1][2] == "0")
				{
					setcvar "AIR_cmd" ""
					local.integer = int(local.command[1][2])
					waitthread apply_setting local.command[1][1] local.integer

					if (local.integer == 1 && level.smessages_running != 1)
					{
						exec global/AIR/AIR_messages.scr
					}
				}
				else
				{
					setcvar "AIR_cmd" ""
					println "[AIR Cmd::Spec_Messages]: Invalid value! Turn Spectator Messages 1 (on) or 0 (off)!"
				}
			break
			case "camper":

				if (local.command[1][2] == "1" || local.command[1][2] == "0")
				{
					setcvar "AIR_cmd" ""
					local.integer = int(local.command[1][2])
					waitthread apply_setting local.command[1][1] local.integer
				}
				else
				{
					setcvar "AIR_cmd" ""
					println "[AIR Cmd::Anti-Camper]: Invalid value! Turn the Anti-Camper Scanner 1 (on) or 0 (off)!"
				}
			break
			case "camper_time":

				local.num = float(local.command[1][2])
				if (local.num >= 8)
				{
					setcvar "AIR_cmd" ""
					local.integer = float(local.command[1][2])
					waitthread apply_setting local.command[1][1] local.integer
				}
				else
				{
					setcvar "AIR_cmd" ""
					println "[AIR Cmd::Anti-Camper_Time]: Invalid value! The Anti-Camper time value can't be less than 8 seconds!!"
				}
			break
			case "camper_radius":

				local.num = float(local.command[1][2])
				if (local.num > 20.00)
				{
					setcvar "AIR_cmd" ""
					local.integer = float(local.command[1][2])
					waitthread apply_setting local.command[1][1] local.integer
				}
				else
				{
					setcvar "AIR_cmd" ""
					println "[AIR Cmd::Anti-Camper_Radius]: Invalid value! The Anti-Camper Radius value can't be negative or less than 20!"
				}
			break
			case "camper_punish":

				if (local.command[1][2] == "0" || local.command[1][2] == "1" || local.command[1][2] == "2" || local.command[1][2] == "3" || local.command[1][2] == "4")
				{
					setcvar "AIR_cmd" ""
					local.integer = int(local.command[1][2])
					waitthread apply_setting local.command[1][1] local.integer
				}
				else
				{
					setcvar "AIR_cmd" ""
					println "[AIR Cmd::Anti-Camper_Punish]: Invalid value! The Anti-Camper Punishment value must be one of the following:"
					println "------------------------------------------------------------------------------------------------------------"
					println "[AIR Cmd::Anti-Camper_Punish]: 1 = Deals 10 damage each second and make player say he's a camper"
					println "[AIR Cmd::Anti-Camper_Punish]: 2 = Kill player and make player say he's a camper"
					println "[AIR Cmd::Anti-Camper_Punish]: 3 = Kick player into spectator and make player say he's a camper"
					println "[AIR Cmd::Anti-Camper_Punish]: 4 = Kicks player off the server before letting everyone know he's a camper"
				}
			break
			case "camper_message":

				if (local.command[1][2] == "1" || local.command[1][2] == "0")
				{
					setcvar "AIR_cmd" ""
					local.integer = int(local.command[1][2])
					waitthread apply_setting local.command[1][1] local.integer
				}
				else
				{
					setcvar "AIR_cmd" ""
					println "[AIR Cmd::Anti-Camper_Message]: Invalid value! Turn the Anti-Camper Message 1 (on) or 0 (off)!"
				}
			break
			case "camper_sound":

				if (local.command[1][2] == "1" || local.command[1][2] == "0")
				{
					setcvar "AIR_cmd" ""
					local.integer = int(local.command[1][2])
					waitthread apply_setting local.command[1][1] local.integer
				}
				else
				{
					setcvar "AIR_cmd" ""
					println "[AIR Cmd::Anti-Camper_Sound]: Invalid value! Turn the Anti-Camper Sound-Inform 1 (on) or 0 (off)!"
				}
			break
			case "cmd":

				if (local.command[1][2] == "1" || local.command[1][2] == "0")
				{
					setcvar "AIR_cmd" ""
					local.integer = int(local.command[1][2])
					waitthread apply_setting local.command[1][1] local.integer
					println "[AIR Cmd::Command_Service]: NOTE that you cannot insert any more values if the Server Command-Service is turned off. You can only turn it back on!"
				}
				else
				{
					setcvar "AIR_cmd" ""
					println "[AIR Cmd::Command_Service]: Invalid value! Turn the Server Command-Service 1 (on) or 0 (off)!"
					println "[AIR Cmd::Command_Service]: NOTE that you cannot insert any more values if turned off. You can only turn it back on!"
				}
			break
			case "music":

				if (local.command[1][2] == "1" || local.command[1][2] == "0")
				{
					setcvar "AIR_cmd" ""
					local.integer = int(local.command[1][2])
					waitthread apply_setting local.command[1][1] local.integer
				}
				else
				{
					setcvar "AIR_cmd" ""
					println "[AIR Cmd::Music]: Invalid value! Turn Spectator Music 1 (on) or 0 (off)!"
				}
			break
			case "music_mode":

				if (local.command[1][2] == "sequenced" || local.command[1][2] == "random")
				{
					setcvar "AIR_cmd" ""
					waitthread apply_setting local.command[1][1] local.command[1][2]
				}
				else
				{
					setcvar "AIR_cmd" ""
					println "[AIR Cmd::Music Mode]: Invalid! The Spectator Music Mode can only be random or sequenced!"
				}
			break
			case "weapon_limiter":

				if (local.command[1][2] == "1" || local.command[1][2] == "0")
				{
					setcvar "AIR_cmd" ""
					local.integer = int(local.command[1][2])
					waitthread apply_setting local.command[1][1] local.integer
				}
				else
				{
					setcvar "AIR_cmd" ""
					println "[AIR Cmd::Weapon Limiter]: Invalid value! Turn the Weapon Limiter 1 (on) or 0 (off)!"
				}
			break
			case "realism":

				if (local.command[1][2] == "1" || local.command[1][2] == "0")
				{
					setcvar "AIR_cmd" ""
					local.integer = int(local.command[1][2])
					waitthread apply_setting local.command[1][1] local.integer

					if (local.integer == 1 && level.view_run != 1)
					{
						exec global/AIR_view.scr
					}
				}
				else
				{
					setcvar "AIR_cmd" ""
					println "[AIR Cmd::Realism]: Invalid value! Turn the Realism Mod 1 (on) or 0 (off)!"
				}
			break
			case "nextmap_display":

				if (local.command[1][2] == "1" || local.command[1][2] == "0")
				{
					setcvar "AIR_cmd" ""
					local.integer = int(local.command[1][2])
					waitthread apply_setting local.command[1][1] local.integer

					if (local.integer == 1 && level.nextmap_running != 1)
					{
						exec global/AIR/AIR_nextmap.scr
					}
				}
				else
				{
					setcvar "AIR_cmd" ""
					println "[AIR Cmd::Nextmap]: Invalid value! Turn the Nextmap Display 1 (on) or 0 (off)!"
				}
			break
			case "nextmap_rect":

				if (local.command[1][2] != NIL || local.command[1][3] != NIL )
				{
					setcvar "AIR_cmd" ""
					waitthread global/AIR/AIR_nextmap.scr::new_rect local.command[1][2] local.command[1][3]
				}
				else
				{
					setcvar "AIR_cmd" ""
				}
			break
			case "spawn_protect":

				if (local.command[1][2] == "1" || local.command[1][2] == "0")
				{
					setcvar "AIR_cmd" ""
					local.integer = int(local.command[1][2])
					waitthread apply_setting local.command[1][1] local.integer
				}
				else
				{
					setcvar "AIR_cmd" ""
					println "[AIR Cmd::Spawn Protect]: Invalid value! Turn the Spawn Protection 1 (on) or 0 (off)!"
				}
			break
			case "spawn_protect_sec":

				local.num = float(local.command[1][2])
				if (local.num >= 1)
				{
					setcvar "AIR_cmd" ""
					local.integer = float(local.command[1][2])
					waitthread apply_setting local.command[1][1] local.integer
				}
				else
				{
					setcvar "AIR_cmd" ""
					println "[AIR Cmd::Spawn Protect Time]: Invalid value! The Spawn Protect time value can't be less than 1 second!!"
				}
			break
			default:
				////////////////////////////////////////////////
				// This part of the parser scans and executes //
				// custom registered commands!		    //
				// ---------					    //
				// Remember that variables will be inserted   //
				// as strings, so adjust your scripts to	    //
				// evaluate string types (eg "1")		    //
				////////////////////////////////////////////////
				if (level.AIR_reg != NIL)
				{
					for (local.f = 1; local.f <= level.AIR_reg.size; local.f++)
					{
						if (level.AIR_reg[local.f][1] == local.command[1][1])
						{
							local.found = 1
							if (level.AIR_reg[local.f][3] == "1")
							{
								if (local.command[1].size == 1)
									waitexec level.AIR_reg[local.f][2] 
								else if (local.command[1].size == 2)
									waitexec level.AIR_reg[local.f][2] local.command[1][2] 
								else if (local.command[1].size == 3)
									waitexec level.AIR_reg[local.f][2] local.command[1][2] local.command[1][3] 
								else if (local.command[1].size == 4)
									waitexec level.AIR_reg[local.f][2] local.command[1][2] local.command[1][3] local.command[1][4] 
								else if (local.command[1].size == 5)
									waitexec level.AIR_reg[local.f][2] local.command[1][2] local.command[1][3] local.command[1][4] local.command[1][5]
								else if (local.command[1].size == 6)
									waitexec level.AIR_reg[local.f][2] local.command[1][2] local.command[1][3] local.command[1][4] local.command[1][5] local.command[1][6]
								else if (local.command[1].size == 7)
									waitexec level.AIR_reg[local.f][2] local.command[1][2] local.command[1][3] local.command[1][4] local.command[1][5] local.command[1][6] local.command[1][7]
								else if (local.command[1].size == 8)
									waitexec level.AIR_reg[local.f][2] local.command[1][2] local.command[1][3] local.command[1][4] local.command[1][5] local.command[1][6] local.command[1][7] local.command[1][8]
							}
							else
							{
								if (local.command[1].size == 1)
									exec level.AIR_reg[local.f][2] 
								else if (local.command[1].size == 2)
									exec level.AIR_reg[local.f][2] local.command[1][2] 
								else if (local.command[1].size == 3)
									exec level.AIR_reg[local.f][2] local.command[1][2] local.command[1][3] 
								else if (local.command[1].size == 4)
									exec level.AIR_reg[local.f][2] local.command[1][2] local.command[1][3] local.command[1][4] 
								else if (local.command[1].size == 5)
									exec level.AIR_reg[local.f][2] local.command[1][2] local.command[1][3] local.command[1][4] local.command[1][5]
								else if (local.command[1].size == 6)
									exec level.AIR_reg[local.f][2] local.command[1][2] local.command[1][3] local.command[1][4] local.command[1][5] local.command[1][6]
								else if (local.command[1].size == 7)
									exec level.AIR_reg[local.f][2] local.command[1][2] local.command[1][3] local.command[1][4] local.command[1][5] local.command[1][6] local.command[1][7]
								else if (local.command[1].size == 8)
									exec level.AIR_reg[local.f][2] local.command[1][2] local.command[1][3] local.command[1][4] local.command[1][5] local.command[1][6] local.command[1][7] local.command[1][8]
							}
							if (level.AIR_reg[local.f][4] != NIL)
							{
								println level.AIR_reg[local.f][4]
							}
						}
					}
					if (local.found != 1)
					{
						println "[AIR Cmd::Command_Parser]: Invalid command!!"
					}
				}
				else 
				{
					println "[AIR Cmd::Command_Parser]: Invalid command!!"
				}
				setcvar "AIR_cmd" ""
			break
			}
			////////////////////////
			//////END Default///////
			////////////////////////
		}		
	}
	wait 1
}

while(local.cmd_h != 1)
{
	local.AIR_cmd = getcvar("AIR_cmd")
	local.cmd_h = waitthread get_setting "cmd"

	if (local.AIR_cmd != "")
	{
		// Parse Command information
		local.command = waitexec global/strings.scr::split_line local.AIR_cmd 1 " "

		// Convert Command to lower case characters - just in case
		local.command[1][1] = waitexec global/strings.scr::to_lower local.command[1][1]
		switch (local.command[1][1])
		{
			case "cmd":
				if (local.command[1][2] == "1")
				{
					setcvar "AIR_cmd" ""
					level.AIR["cmd"] = int(local.command[1][2])
				}
				else
				{
					println "[AIR Cmd::Command_Service]: You can only turn the Server Command-Service back on (1)"
				}
			break
			default:
				setcvar "AIR_cmd" ""
				println "[AIR Cmd::Command_Service]: You can only turn the Server Command-Service back on (1)"
			break
		}
	}
	wait 5
}

	println "[AIR Cmd::Command_Service]: Booting Server Command-Service back up!"
	thread cmd_handler

end