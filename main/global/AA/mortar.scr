main local.mortar_check_ammo:

	local.maxcount = 20
	local.count = local.maxcount
	local.can_deploy = 0
	local.mortar_enabled = 0

	if (local.mortar_check_ammo != 1)
	{
		self.mortar_max_ap_proj_amount = 28
		self.mortar_max_he_proj_amount = 28

		self.mortar_ap_proj_amount = self.mortar_max_ap_proj_amount
		self.mortar_he_proj_amount = self.mortar_max_he_proj_amount

		self.mortar_ap_proj = "models/projectiles/granatwerferproj_ap.tik"
		self.mortar_he_proj = "models/projectiles/granatwerferproj_he.tik"

		self.mortar_proj_type = "ap"
	}

	if (self.mortar_help != 1)
	{
		self.mortar_help = 1
		self thread mortar_help
	}

	self.ismortarman = 1

	while ( self != NULL && self.player_spawned == 1 && local.mortar_enabled != 1 )
	{
		if ( self getposition == "crouching" && self getmovement == "standing" && self.has_weapon != 1 )
		{
			if ( self.fireheld != 1 && self.secfireheld != 1 && self.useheld == 1 && self.bas_bomb != 1 )
			{
				if (local.count == local.maxcount)
				{
					local.can_deploy = 0
					local.startangles = self.viewangles

					local.check_place = self waitthread check_place local.startangles

					if (local.check_place == 1)
					{
						local.can_deploy = 1
						self stopwatch (local.count / 20)
					}
				}

				if (local.can_deploy == 1)
					local.count--
			}
			else
			{
				if (local.count < local.maxcount)
				{
					self stopwatch 0
					local.count = local.maxcount
				}
			}
		}
		else
		{
			if (local.count < local.maxcount)
			{
				self stopwatch 0
				local.count = local.maxcount
			}
		}

		waitframe

		if (local.count == 0)
			local.mortar_enabled = 1
	}

	if (self != NULL)
		self stopwatch 0

	if ( self == NULL || self.player_spawned != 1 )
		end

	local.mortar_base = spawn script_model scale 2.0
	local.mortar_base.origin = self.origin + ( 0 0 30 )
	local.mortar_base.angles = ( 0 local.startangles[1] 0 )
	local.mortar_base model "models/statweapons/mg42_bipod.tik"
	local.mortar_base notsolid

	local.mortar_cannon = spawn script_model scale 0.7
	local.mortar_cannon.origin = local.mortar_base.origin + angles_toforward local.mortar_base.angles * 5 + angles_toleft local.mortar_base.angles * -2.8
	local.mortar_cannon.angles = local.mortar_base.angles + ( -65 0 180 )
	local.mortar_cannon model "models/weapons/bazooka.tik"
	local.mortar_cannon notsolid

	self.mortar_base = local.mortar_base

	self thread init_mortar local.mortar_cannon local.mortar_base self.dmteam

end

init_mortar local.mortar local.mortar_base local.team:

	self.has_mortar = 1
	self.inveh = 1
	self.mortar_firetime = 2.0
	self.mortar_proj_camera = 0
	self.mortar_can_switch_proj = 1

	if (self.mortar_overheat == NIL)
		self.mortar_overheat = 0

	if (self.mortar_canfire == NIL)
		self.mortar_canfire = 1

	local.z = self.origin[2]

	local.org = spawn script_origin
	local.org.origin = local.mortar.origin + angles_toforward ( 0 local.mortar.angles[1] 0 ) * -30
	local.org.origin = ( local.org.origin[0] local.org.origin[1] local.z )
	local.org.angles = ( 0 local.mortar.angles[1] 0 )

	self.viewangles = ( 0 local.mortar.angles[1] 0 )

	self glue local.org

	self forcetorsostate MORTAR

	local.exit_mortar = 0
	local.mortar.mortar_yaw = 0.0
	local.switch_camera = 0
	local.refresh_angle_hud = 10
	local.exit_count = 20

	local.oldangles = local.mortar.angles

	self thread mortar_huds

	if (self.mortar_ready_help != 1)
	{
		self.mortar_ready_help = 1

		self iprint "Press the crouch button to indicate your mortar status for your teammates." 1
		self iprint "SECONDARY ATTACK BUTTON: Turn the projectile camera on/off."
		self iprint "WEAPON SWITCH BUTTON: Change between the AP/HE projectile type."
		self iprint "JUMP BUTTON: Center view."
	}

	while ( self != NULL && self.player_spawned == 1 && local.mortar != NULL && local.exit_mortar != 1 )
	{
		self thread mortar_angles local.mortar local.org local.z local.oldangles

		local.oldangles = local.mortar.angles

		if ( self.fireheld == 1 && self.secfireheld != 1 && self.mortar_canfire == 1 )
			self thread mortar_fire local.mortar
		else if ( self.fireheld == 1 && self.secfireheld == 1 && local.switch_camera == 0 )
		{
			local.switch_camera = 10
			if (self.mortar_proj_camera != 1)
			{
				self.mortar_proj_camera = 1
				local.camera_state = "ON"
			}
			else if (self.mortar_proj_camera == 1)
			{
				self.mortar_proj_camera = 0
				local.camera_state = "OFF"
			}

			ihuddraw_string self 28 ( "Projectile camera: " + local.camera_state )
		}

		if ( self.keyheld[FEGYVERVALTAS] && self.mortar_can_switch_proj == 1 )
			self thread switch_proj_type

		if (self.keyheld[GUGOLAS])
		{
			if ( local.mortar_status_count == NIL || level.time - local.mortar_status_count > 4.0 )
			{
				local.mortar_status_count = level.time

				self dmmessage -1 ( "I'm ready with my mortar for supporting." )
			}
		}

		if (local.refresh_angle_hud == 10)
		{
			ihuddraw_string self 29 ( "Horizontal angle: " + self.angles[1] + " (" + local.mortar.mortar_yaw + ")" )
			ihuddraw_string self 30 ( "Vertical angle: " + ( (local.mortar gettagangles "tag_barrel")[0] * -1.0 ) )
		}

		if (local.refresh_angle_hud > 0)
			local.refresh_angle_hud--

		if (local.refresh_angle_hud == 0)
			local.refresh_angle_hud = 10

		if ( local.exit_count == 0 && self.useheld == 1 )
			local.exit_mortar = 1

		if (local.switch_camera > 0)
			local.switch_camera--

		if (local.exit_count > 0)
			local.exit_count--

		waitframe
	}

	if (local.org)
		local.org remove

	if (local.mortar)
		local.mortar remove

	if (local.mortar_base)
		local.mortar_base remove

	if (self == NULL)
		end

	self unglue
	self.origin += ( 0 0 32 )

	self.has_mortar = 0
	self.inveh = 0

	ihuddraw_alpha self 28 0.0
	ihuddraw_alpha self 29 0.0
	ihuddraw_alpha self 30 0.0
	ihuddraw_alpha self 31 0.0
	ihuddraw_alpha self 32 0.0

	if (self.dmteam == local.team)
	{
		self forcetorsostate STAND
		self forcelegsstate STAND
	}
	else
	{
		if (self.dmteam != "spectator")
		{
			self.disable_spawn = 1

			if (isAlive self)
				self respawn
		}
	}

	local.count = 40

	while ( self != NULL && self.player_spawned == 1 && local.count > 0 )
	{
		local.count--
		waitframe
	}

	if ( self == NULL || self.player_spawned != 1 )
		end

	self exec global/AA/mortar.scr 1

end

mortar_angles local.mortar local.org local.z local.oldangles:

	if (self.keyheld[ELORE])
	{
		local.mortar.angles += ( 0.5 0 0 )

		local.angles = local.mortar gettagangles "tag_barrel"
		if (local.angles[0] > -45.0)
			local.mortar.angles -= ( 0.5 0 0 )
	}
	else if (self.keyheld[HATRA])
	{
		local.mortar.angles -= ( 0.5 0 0 )

		local.angles = local.mortar gettagangles "tag_barrel"
		if (local.angles[0] < -89.5)
			local.mortar.angles += ( 0.5 0 0 )
	}

	if (self.keyheld[BALRA])
	{
		local.mortar.angles += ( 0 0.5 0 )
		local.mortar.mortar_yaw += 0.5

		if (local.mortar.mortar_yaw > 45.0)
		{
			local.mortar.angles -= ( 0 0.5 0 )
			local.mortar.mortar_yaw -= 0.5
		}
	}
	else if (self.keyheld[JOBBRA])
	{
		local.mortar.angles -= ( 0 0.5 0 )
		local.mortar.mortar_yaw -= 0.5

		if (local.mortar.mortar_yaw < -45.0)
		{
			local.mortar.angles += ( 0 0.5 0 )
			local.mortar.mortar_yaw += 0.5
		}
	}

	if (self.keyheld[UGRAS])
		self.viewangles = ( 0 local.mortar.angles[1] 0 )

	local.org.origin = local.mortar.origin + angles_toforward ( 0 local.mortar.angles[1] 0 ) * -30
	local.org.origin = ( local.org.origin[0] local.org.origin[1] local.z )
	local.org.angles = ( 0 local.mortar.angles[1] 0 )

	local.deltaangles = local.mortar.angles - local.oldangles
	self.viewangles = ( self.viewangles[0] (self.viewangles[1] + local.deltaangles[1]) self.viewangles[2] )

end

mortar_fire local.mortar:

	if ( ( self.mortar_proj_type == "ap" && self.mortar_ap_proj_amount <= 0 ) || ( self.mortar_proj_type == "he" && self.mortar_he_proj_amount <= 0 ) )
		end

	self.mortar_canfire = 0

	local.mortar anim fire

	local.shell = spawn script_model scale 0.02
	local.shell.origin = local.mortar gettagposition "tag_barrel"
	local.shell.angles = local.mortar gettagangles "tag_barrel" + ( -90 0 0 )
	local.shell model "models/static/v2.tik"
	local.shell.attacker = self
	local.shell notsolid

	local.shell thread shell_flying self.mortar_proj_type local.mortar

	if (self.mortar_proj_type == "ap")
		self.mortar_ap_proj_amount--
	else if (self.mortar_proj_type == "he")
		self.mortar_he_proj_amount--

	self thread check_ammo_hud

	self.mortar_overheat++
	if (self.mortar_overheat >= 5)
	{
		self thread mortar_overheated
		end
	}

	wait self.mortar_firetime

	if (local.mortar == NULL)
	{
		if (self != NULL)
			self.mortar_canfire = 1

		end
	}

	local.mortar anim idle

end

mortar_overheated:

	self iprint "Mortar overheated..."

	wait 10

	if (self != NULL)
	{
		self.mortar_overheat = 0
		self.mortar_canfire = 1
	}

end

shell_flying local.proj_type local.mortar:

	local.startorigin = self.origin
	local.startangles = self.angles

	local.alfa = (local.mortar gettagangles "tag_barrel")[0] * -1.0
	local.sinalfa = waitthread global/AA/math.scr::sin local.alfa
	local.cosalfa = waitthread global/AA/math.scr::cos local.alfa

	local.V0 = 1574.8 // 30 m/s
	local.g = 514.96 // 9.81 m/s^2
	local.lifetime = 20.0 // s
	local.incoming_sound = 0
	local.t = 0.0
	local.dt = 0.05

	self.impact = 0

	self thread mortar_proj_camera

	while ( self.impact != 1 && local.t < local.lifetime && self.attacker != NULL )
	{
		local.V0x = local.V0 * local.cosalfa
		local.V0y = local.V0 * local.sinalfa

		local.Vx = local.V0x
		local.Vy = local.V0y - (local.g * local.t)
		local.V = waitthread global/AA/math.scr::sqrt ( (local.Vx * local.Vx) + (local.Vy * local.Vy) )

		if (local.Vx != 0.0)
		{
			local.pitch = waitthread global/AA/math.scr::arctan (local.Vy / local.Vx)
			local.pitch = local.pitch * -1.0
		}
		else
			local.pitch = self.angles[0]

		self.pitch = local.pitch

		local.x = local.V0x * local.t
		local.y = local.V0y * local.t - ( (local.g / 2.0) * (local.t * local.t) )

		self.origin = local.startorigin + angles_toforward ( 0 local.startangles[1] 0 ) * local.x + angles_toup ( 0 local.startangles[1] 0 ) * local.y
		self.angles = ( (local.pitch - 90.0) self.angles[1] self.angles[2] )

		if ( self.angles[0] < 360 && self.angles[0] > 320 )
		{
			if (local.incoming_sound != 1)
			{
				local.incoming_sound = 1
				self thread incoming_sound
			}
		}

		if (local.t > 0.0)
		{
			//local.sky = self waitthread check_sky_bottom self.origin
			self waitthread shell_impact local.V local.dt local.sky
		}

		wait local.dt
		local.t += local.dt
	}

	if (self.sound_org)
	{
		self.sound_org stoploopsound
		self.sound_org remove
	}

	if ( local.t >= local.lifetime || self.attacker == NULL )
	{
		self.impact = 1

		self hide

		wait 2

		self remove

		end
	}

	self thread shell_explode local.dt local.proj_type

end

shell_impact local.speed local.dt local.bottom:

	local.speed = local.speed * local.dt

	local.trace = waitexec global/AA/trace.scr self.origin ( self.origin + angles_toforward ( self.pitch self.angles[1] self.angles[2] ) * local.speed ) self.entnum ( -1 -1 -1 ) ( 1 1 1 ) 1107569441
	//local.traced_pos = local.trace["endPos"]

	//if (local.traced_pos[2] >= local.bottom)
	if (local.trace["surfacetype"] == "sky")
		end

	if ( local.trace["surfaceFlags"] == 0 && local.trace["contents"] == 0 )
		end

	if (local.trace["fraction"] != 1.0)
	{
		self.impact = 1
	}

end

incoming_sound:

	self.sound_org = spawn script_model model "models/fx/dummy.tik" origin self.origin
	self.sound_org glue self
	self.sound_org playsound mortar_incoming

end

shell_explode local.dt local.proj_type:

	self.impact = 1

	self hide

	local.weapon = spawn "models/weapons/weapon.tik" origin ( 0 0 -20000 )
	local.weapon notsolid
	local.weapon hide

	local.weapon firetype heavy
	local.weapon projectile ( "models/projectiles/mortarshell_" + local.proj_type + ".tik" )
	local.weapon dmprojectile ( "models/projectiles/mortarshell_" + local.proj_type + ".tik" )

	self.attacker bindweap local.weapon
	local.weapon shoot
	self.attacker bindweap local.weapon

	local.weapon remove

	local.mortarshell = NULL
	while (local.mortarshell == NULL)
	{
		wait local.dt

		if ($mortarshell.size > 0)
		{
			for (local.i = 1;local.i <= $mortarshell.size;local.i++)
			{
				local.proj = $mortarshell[local.i]

				if ( local.proj != NULL && local.proj.attacker != NIL && local.proj.attacker != NULL && local.proj.checked != 1 )
				{
					local.proj.checked = 1
					local.mortarshell = local.proj

					break
				}
			}
		}
	}

	if (local.mortarshell != NULL)
	{
		local.mortarshell.origin = self.origin
		local.mortarshell.angles = ( (self.angles[0] + 90) self.angles[1] 0 )
		local.mortarshell solid

		if (local.proj_type == "ap")
			local.mortarshell hitdamage 800
		else if (local.proj_type == "he")
			local.mortarshell hitdamage 200

		local.mortarshell explodeontouch
		local.mortarshell.velocity = local.mortarshell.forwardvector * 20000
	}

	local.fx = spawn script_model model "models/animate/fx_mortar_dirt.tik" scale 2.0
	local.fx.origin = self.origin
	local.fx notsolid
	local.fx anim start

	local.fx2 = spawn script_model model "models/animate/fx_mortar_dirt.tik"
	local.fx2.origin = self.origin
	local.fx2 notsolid
	local.fx2 anim start

	wait 2

	self remove
	local.fx remove
	local.fx2 remove

end

mortar_proj_camera:

	if (self.attacker.mortar_proj_camera != 1)
		end

	if ( self.attacker.mortar_camera == NIL || self.attacker.mortar_camera == NULL )
	{
		local.name = "mortar_camera" + randomint 999999 + self.attacker.entnum
		local.camera = spawn func_camera targetname local.name
		local.camera.cam_trigger = spawn trigger_camerause target local.name

		self.attacker.mortar_camera = local.camera
	}

	ihuddraw_alpha self.attacker 31 0.0

	waitframe

	if ( self.attacker == NULL || self.attacker.mortar_camera == NULL )
		end

	self.attacker.mortar_camera attach self "Box01" 0 ( 0 -20 0 )
	self.attacker.mortar_camera.cam_trigger douse self.attacker
	self.attacker.mortar_camera.proj = self

	local.camera = self.attacker.mortar_camera
	local.end_camera = 0

	while ( self.impact != 1 && local.camera != NULL && local.camera.proj == self && local.end_camera != 1 )
	{
		if ( self.angles[0] < 360 && self.angles[0] >= 270 )
			local.camera.angles = ( self.pitch self.angles[1] 0 )
		else
			local.camera.angles = ( 30 self.angles[1] 0 )

		if (self.attacker.forced_cueplayer == 1)
		{
			self.attacker.forced_cueplayer = 0
			self.attacker.mortar_camera.cam_trigger douse self.attacker
		}

		if ( self.attacker == NULL || self.attacker.has_mortar != 1 || self.attacker.mortar_proj_camera != 1 )
			local.end_camera = 1

		waitframe
	}

	if ( local.end_camera == 1 || ( self.impact == 1 && local.camera.proj == self ) )
	{
		if ( self.attacker != NULL && self.attacker.has_mortar == 1 )
			ihuddraw_alpha self.attacker 31 1.0

		if (local.camera)
		{
			if (local.camera.cam_trigger)
				local.camera.cam_trigger remove

			local.camera remove
		}
	}

end

switch_proj_type:

	self.mortar_can_switch_proj = 0

	self weapnext
	self activatenewweapon righthand

	self deactivateweapon righthand

	if (self.mortar_proj_type == "ap")
		self.mortar_proj_type = "he"
	else if (self.mortar_proj_type == "he")
		self.mortar_proj_type = "ap"

	self thread check_ammo_hud

	wait .5

	if ( self != NULL && self.has_mortar == 1 )
		self.mortar_can_switch_proj = 1

end

mortar_huds:

	if (self.mortar_proj_camera == 0)
		local.camera_state = "OFF"
	else if (self.mortar_proj_camera == 1)
		local.camera_state = "ON"

	ihuddraw_align self 28 left bottom
	ihuddraw_font self 28 courier-16
	ihuddraw_rect self 28 16 -200 128 16
	ihuddraw_string self 28 ( "Projectile camera: " + local.camera_state )
	ihuddraw_color self 28 1 0.588 0
	ihuddraw_alpha self 28 1.0

	ihuddraw_align self 29 left bottom
	ihuddraw_font self 29 courier-16
	ihuddraw_rect self 29 16 -180 128 16
	ihuddraw_color self 29 1 0.588 0
	ihuddraw_alpha self 29 1.0

	ihuddraw_align self 30 left bottom
	ihuddraw_font self 30 courier-16
	ihuddraw_rect self 30 16 -160 128 16
	ihuddraw_color self 30 1 0.588 0
	ihuddraw_alpha self 30 1.0

	ihuddraw_align self 31 center center
	ihuddraw_rect self 31 0 0 4 4
	ihuddraw_shader self 31 "textures/common/white.tga"
	ihuddraw_color self 31 1 0 0
	ihuddraw_alpha self 31 1.0

	ihuddraw_align self 32 left bottom
	ihuddraw_font self 32 courier-16
	ihuddraw_rect self 32 16 -140 128 16
	ihuddraw_color self 32 0.5 1.0 0.5
	ihuddraw_alpha self 32 1.0

	self thread check_ammo_hud

end

check_ammo_hud:

	if (self.mortar_proj_type == "ap")
		local.text = ( self.mortar_ap_proj_amount + " AP" )
	else if (self.mortar_proj_type == "he")
		local.text = ( self.mortar_he_proj_amount + " HE" )

	ihuddraw_string self 32 ( "Mortar Ammo: " + local.text )

end

check_place local.angles:

	for (local.i = 1;local.i <= 3;local.i++)
	{
		local.angle = local.angles[1] + (120.0 + 30.0 * local.i)

		local.startpos = self.origin + ( 0 0 20 )
		local.endpos = self.origin + angles_toforward ( 0 local.angle 0 ) * 100 + ( 0 0 20 )
		local.trace = waitexec global/AA/trace.scr local.startpos local.endpos self.entnum ( -1 -1 -1 ) ( 1 1 1 ) 1107569441

		if (local.trace["fraction"] != 1.0)
			end 0
	}

end 1

check_sky_bottom local.pos:

	local.trace = waitexec global/AA/trace.scr ( local.pos[0] local.pos[1] 20000 ) ( local.pos[0] local.pos[1] -20000 ) self.entnum ( -1 -1 -1 ) ( 1 1 1 ) 1107372801
	local.traced_pos = local.trace["endPos"]

	local.z = 30

	for (local.i = 1;local.i <= 40;local.i++)
	{
		local.trace = waitexec global/AA/trace.scr ( local.traced_pos - ( 0 0 local.z ) ) local.traced_pos self.entnum ( -1 -1 -1 ) ( 1 1 1 ) 1107372801
		local.new_traced_pos = local.trace["endPos"]

		local.z += 30

		if (local.new_traced_pos[2] < local.traced_pos[2])
			break
	}

	local.sky_bottom = local.new_traced_pos[2]

end local.sky_bottom

mortar_target:

	local.gt = int ( getcvar "g_gametype" )
	if (local.gt == 1)
		end

	if (self.mortar_target_area != 1)
	{
		self.mortar_target_area = 1

		local.pos = self gettagposition "eyes bone"
		local.trace = waitexec global/AA/trace.scr local.pos ( local.pos + angles_toforward self.viewangles * 20000 ) self.entnum ( -1 -1 -1 ) ( 1 1 1 ) 1107569441

		local.mortars = 0
		for (local.i = 1;local.i <= $player.size;local.i++)
		{
			local.player = $player[local.i]

			if ( local.player != NULL && local.player.ismortarman == 1 && local.player.has_mortar == 1 && local.player.dmteam == self.dmteam )
			{
				local.mortars++

				self thread mortar_target_area local.player local.trace["endPos"]
			}
		}

		if (local.mortars == 0)
		{
			self iprint "There are no deployed mortars!"

			wait 1

			self.mortar_target_area = 0
		}
		else
		{
			if (local.mortars == 1)
				self iprint ( "There is " + local.mortars + " mortar!" )
			else
				self iprint ( "There are " + local.mortars + " mortars!" )
		}

		wait 5

		if (self != NULL)
			self.mortar_target_area = 0
	}

end

mortar_target_area local.player local.pos:

	if ( local.player.mortar_base == NIL || local.player.mortar_base == NULL )
		end

	local.name = netname self

	local.startpos = ( local.player.mortar_base.origin[0] local.player.mortar_base.origin[1] local.player.origin[2] )
	local.endpos = local.pos

	local.angles = vector_toangles ( local.endpos - local.startpos )
	local.yaw = local.angles[1]

	local.a = ( local.startpos[0] local.startpos[1] 0 )
	local.b = ( local.endpos[0] local.endpos[1] 0 )
	local.x = vector_length ( local.a - local.b )

	local.V0 = 1574.8
	local.g = 514.96

	if ( abs ( (local.x * local.g) / (local.V0 * local.V0) ) > 1.0 )
	{
		local.player iprint ( local.name + " target area is out of distance!" )
		end
	}

	local.alfa = waitthread global/AA/math.scr::arcsin ( (local.x * local.g) / (local.V0 * local.V0) )
	local.alfa = 90.0 - (local.alfa / 2.0)

	local.player iprint ( local.name + " target area || HORZ. Angle: " + local.yaw + ", VERT. Angle: " + local.alfa )

end

mortar_help:

	self iprint "Crouch, holster your weapon and hold the use button to deploy mortar!" 1

end
