main:

	if ( level.airstrike_startpoints == NIL || level.airstrike_startpoints == NULL )
	{
		if ($airstrike_startpoint.size > 0)
		{
			for (local.i = 1;local.i <= $airstrike_startpoint.size;local.i++)
			{
				local.startpoint = $airstrike_startpoint[local.i].origin

				if ( level.airstrike_startpoints == NIL || level.airstrike_startpoints == NULL )
					level.airstrike_startpoints[1] = local.startpoint
				else
					level.airstrike_startpoints[level.airstrike_startpoints.size + 1] = local.startpoint
			}
		}
		else
		{
			self iprint "Airstrike is not available on this map." 1
			end
		}
	}

	self.binoculars_fire = 0

	if (self.airstrike_recharged == NIL)
		self.airstrike_recharged = 1

	if (self.airstrike_help != 1)
	{
		self.airstrike_help = 1
		self iprint "Use your binoculars and press the attack button to call for Airstrike!" 1
	}

	if (self.airstrike_message == 1)
	{
		self.airstrike_message = 0

		self iprint "Airstrike is ready!" 1

		self playsound airstrike_ready
	}

	if (self.max_airstrike == NIL)
		self.max_airstrike = 4

	if (self.current_airstrike == NIL)
		self.current_airstrike = self.max_airstrike

	self give models/items/binoculars.tik

	while ( self != NULL && self.player_spawned == 1 )
	{
		if (self.binoculars_fire == 1)
		{
			self.binoculars_fire = 0

			if (self.current_airstrike == 0)
				self iprint "You are out of Airstrike." 1
			else
			{
				if (self.airstrike_recharged == 1)
				{
					if (level.airspace_occupied != 1)
					{
						self.airstrike_recharged = 0
						level.airspace_occupied = 1

						self.current_airstrike--

						self thread reloading_airstrike

						local.pos = self gettagposition "eyes bone"
						local.angles = angles_toforward self.viewangles
						local.trace = waitexec global/AA/trace.scr local.pos ( local.pos + local.angles * 20000 ) self.entnum ( -1 -1 -1 ) ( 1 1 1 ) 1107569441

						self thread start_planes local.trace["endPos"] self.dmteam
					}
					else
						self iprint "Airspace is occupied!" 1
				}
				else
					self iprint "You can't call for Air Support now!" 1
			}
		}

		waitframe
	}

end

reloading_airstrike:

	if (self.current_airstrike == 0)
		end

	local.time = 60

	wait local.time

	if (self == NULL)
		end

	if ( self.player_spawned == 1 && self.airstrike == 1 )
	{
		self iprint "Airstrike is ready!" 1

		self playsound airstrike_ready
	}
	else
		self.airstrike_message = 1

	self.airstrike_recharged = 1

end

start_planes local.pos local.team:

	if (self.current_airstrike > 0)
		self iprint ( "You can call for Airstrike " + self.current_airstrike + " times." ) 1
	else
		self iprint "You are out of Airstrike." 1

	self playsound airstrike_target

	local.fx = self waitthread strike_marker local.pos

	self dmmessage -1 ( "FRIENDLY AIRSTRIKE ON THE WAY!!!" )

	local.origin = ( local.pos[0] local.pos[1] 0 )
	for (local.i = 1;local.i < level.airstrike_startpoints.size;local.i++)
	{
		if (local.point == NIL)
			local.point = ( level.airstrike_startpoints[local.i][0] level.airstrike_startpoints[local.i][1] 0 )

		local.startpoint1 = ( local.point[0] local.point[1] 0 )
		local.startpoint2 = ( level.airstrike_startpoints[local.i + 1][0] level.airstrike_startpoints[local.i + 1][1] 0 )
		local.closer = vector_closer local.startpoint1 local.startpoint2 local.origin

		if (local.closer == 1)
			local.point = local.startpoint2
		else
			local.point = local.startpoint1
	}

	for (local.i = 1;local.i <= level.airstrike_startpoints.size;local.i++)
	{
		if ( local.point[0] == level.airstrike_startpoints[local.i][0] && local.point[1] == level.airstrike_startpoints[local.i][1] )
		{
			local.point = ( local.point[0] local.point[1] level.airstrike_startpoints[local.i][2] )
			break
		}
	}

	local.startpoint = local.point

	local.pos1 = ( local.pos[0] local.pos[1] 0 )
	local.pos2 = ( local.startpoint[0] local.startpoint[1] 0 )
	local.angles = vector_toangles ( local.pos1 - local.pos2 )

	if (local.team == "allies")
		local.model = "models/vehicles/p47fly.tik"
	else if (local.team == "axis")
		local.model = "models/vehicles/stuka_fly.tik"

	self thread spawn_plane local.startpoint local.angles local.team local.model local.pos1 local.pos2 local.fx 0
	wait 1
	self thread spawn_plane ( local.startpoint + angles_toleft local.angles * -400 ) local.angles local.team local.model local.pos1 local.pos2 local.fx 0
	wait 1
	self thread spawn_plane ( local.startpoint + angles_toleft local.angles * 400 ) local.angles local.team local.model local.pos1 local.pos2 local.fx 1

end

spawn_plane local.startpoint local.angles local.team local.model local.pos1 local.pos2 local.fx local.last_plane:

	local.plane = spawn script_model model local.model
	local.plane.origin = local.startpoint
	local.plane.angles = ( 0 local.angles[1] 0 )
	local.plane.attacker = self
	local.plane.bombs = 6
	local.plane nodamage
	local.plane notsolid

	local.plane.weapon = spawn "models/weapons/weapon.tik"
	local.plane.weapon notsolid
	local.plane.weapon hide
	local.plane.weapon glue local.plane

	local.plane.weapon firetype heavy
	local.plane.weapon projectile "models/projectiles/planebomb.tik"
	local.plane.weapon dmprojectile "models/projectiles/planebomb.tik"

	local.plane.speed = 2000.0
	local.plane.velocity = local.plane.forwardvector * local.plane.speed

	local.plane loopsound airstrike

	local.plane waitthread bombs local.team local.fx.origin

	wait .5

	local.roll = randomfloat 60
	local.rand = randomint 3

	if (local.roll < 20.0)
		local.roll = 20.0

	if (local.rand > 1)
		local.roll = local.roll * -1.0

	local.plane thread turn (local.roll * -1.0)

	wait .5

	if (local.last_plane == 1)
	{
		local.fx anim stop
		local.fx remove

		wait 2

		level.airspace_occupied = 0
	}
	else
		wait 2

	local.plane.weapon unglue
	local.plane.weapon remove

	local.plane stoploopsound airstrike
	local.plane remove

end

bombs local.team local.pos:

	while ( vector_length ( self.origin - ( local.pos[0] local.pos[1] self.origin[2] ) ) > self.speed * 1.6 )
		waitframe

	local.time = 40
	local.num = self.bombs

	while ( local.time > 0 && local.num > 0 )
	{
		local.startpos = self.origin
		local.endpos = local.startpos + ( 0 0 -20000 )
		local.trace = waitexec global/AA/trace.scr local.startpos local.endpos self.entnum ( -1 -1 -1 ) ( 1 1 1 ) 1107569441

		if (local.trace["surfacetype"] != "none")
		{
			if ( self.attacker != NULL && self.attacker.dmteam == local.team )
			{
				self.attacker bindweap self.weapon
				self.weapon shoot
				self.attacker bindweap self.weapon

				self thread checking_bomb self.attacker
			}

			self.bombs--
			local.num = self.bombs
		}

		wait .1

		local.time--
	}

end

checking_bomb local.attacker:

	local.planebomb = NULL
	while (local.planebomb == NULL)
	{
		waitframe

		if ($planebomb.size > 0)
		{
			for (local.i = 1;local.i <= $planebomb.size;local.i++)
			{
				local.proj = $planebomb[local.i]

				if ( local.proj != NULL && local.proj.attacker != NIL && local.proj.attacker != NULL && local.proj.attacker == local.attacker && local.proj.checked != 1 )
				{
					local.proj.checked = 1
					local.planebomb = local.proj

					break
				}
			}
		}
	}

	if (local.planebomb != NULL)
	{
		local.rand = randomint 2
		local.yaw = randomfloat 2

		if (local.rand > 0)
			local.yaw = local.yaw * -1.0

		local.planebomb.origin = self.origin + ( 0 0 -50 )
		local.planebomb.angles = self.angles + ( 0 local.yaw 0 )

		local.planebomb setsize ( -10 -10 -10 ) ( 10 10 10 )
		local.planebomb solid
		local.planebomb show
		local.planebomb surface all "+nodraw"
		local.planebomb gravity 2.0
		local.planebomb explodeontouch

		local.planebomb.velocity = self.forwardvector * self.speed
		local.planebomb loopsound arty_leadinmp5

		local.planebomb hitdamage 700

		local.bomb = spawn script_model model "models/ammo/us_bomb.tik" origin local.planebomb.origin
		local.bomb notsolid
		local.bomb attach local.planebomb "Box01" 0 ( 0 0 0 )
		local.bomb.angles = ( 0 (self.angles[1] + 90) 0 )
	}

end

strike_marker local.pos:

	local.trace = waitexec global/AA/trace.scr local.pos ( local.pos - ( 0 0 20000 ) ) NIL ( -1 -1 -1 ) ( 1 1 1 ) 1107569441

	wait .2

	local.fx = spawn "models/emitters/linger_smoke.tik" origin local.trace["endPos"]
	local.fx anim start

end local.fx

turn local.roll:

	self rotatez (local.roll * 1.5)

	self.rolling = 1

	while (self)
	{
		local.roll = self.angles[2]
		if (local.roll > 180)
			local.roll -= 360

		if (self.rolling == 1)
		{
			if (local.roll > 70)
			{
				self rotatez 0
				self.rolling = 0
			}
			else if (local.roll < -70)
			{
				self rotatez 0
				self.rolling = 0
			}
		}

		local.pitch = randomfloat 1.0
		local.pitch = local.pitch * -1.0

		self waitthread global/AA/math.scr::axisrotate (self.leftvector * local.pitch)
		self.velocity = self.forwardvector * self.speed

		waitframe
	}

end
