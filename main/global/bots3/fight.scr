// bots3
// by jv_map

// call to arms
fight:
	
	thread enemysearch

	local.MINDIST = 200.0
	local.STRAFE_AMP = 800.0

	thread strafe
	thread lean

	// fight
	while(isAlive self)
	{
		if(self.botenemy)
		{
			self.pose = level.bots.POSE_STAND

			// move to and turn to
			local.vec = (self.botenemy gettagposition "Bip01 Head") - (self gettagposition "eyes bone")
			local.flatvec = local.vec
			local.flatvec[2] = 0.0
			
			if(local.flatvec != (0 0 0))
			{
				local.flatdist = vector_length local.flatvec
				
				if(local.flatdist > local.MINDIST)
				{
					self.botmovedir = vector_normalize (local.flatvec + local.STRAFE_AMP * self.strafedir * self.leftvector)
				}
				else
				{
					self.botmovedir = self.strafedir * self.leftvector
				}
			}
			else
			{
				self.botmovedir = (0 0 0)
			}
	
			local.vangles = waitthread level.bots.common::anglesmod (vector_toangles local.vec)
			
			if(local.vangles[0] >= 90.0)
			{
				local.vangles[0] -= 180.0
				local.vangles[1] += 180.0
			}
			else if(local.vangles[0] < -90.0)
			{
				local.vangles[0] += 180.0
				local.vangles[1] += 180.0
			}
			
			local.vangles[1] = waitthread level.bots.common::anglemod local.vangles[1]
			
			self.bot_target_viewangles = local.vangles
			
			local.cansee = self cansee self.botenemy
			
			self.key_attack_primary = local.cansee && self.ontarget && self.recoil_controlled
			
			if(self.current_weapon)
			{
				self.key_reload = !local.cansee && self.current_weapon.rounds_in_clip < 0.2 * self.current_weapon.clipsize
			}
			self.key_jump = randomint 200 == 1
			self.key_lean = self.leandir
		}
		else
		{
			self.botmovedir = (0 0 0)
			self.bot_target_viewangles[0] = 0.0
			self.pose = level.bots.POSE_CROUCH
			self.key_attack_primary = 0
			self.key_reload = self.current_weapon.rounds_in_clip < 0.7 * self.current_weapon.clipsize
			self.key_jump = 0
			self.key_lean = 0
		}
		waitframe
	}
end

// randomly sets strafedirs
strafe:
	self.strafedir = 0

	while(isAlive self)
	{
		self.strafedir = 2 * (randomint 2) - 1
		wait 0.2
		wait (randomfloat 0.75)
	}
end

// randomly sets lean
lean:

	self.leandir = 0
	
	while(isAlive self)
	{
		self.leandir = randomint 3 - 1
		wait 0.2
		wait (randomfloat 1.0 * (1.0 - level.bots.skill))
	}

end

enemysearch:

	while(isAlive self)
	{
		waitthread update_enemies
		//waitthread enemeysearch_by_sight
		
		if(!(isAlive self.botenemy) || randomint 100 == 1)
		{
			if(self.enemy_list.size >= 1)
			{
				self.botenemy = self.enemy_list[randomint self.enemy_list.size + 1]
			}
			else
			{
				self.botenemy = NIL
			}
		}
		
		waitframe
	}

end

update_enemies:

	local.li = 0 // list index

	// add players
	for(local.i = 1; local.i <= $player.size; local.i++)
	{
		local.p = $player[local.i]
		
		// TODO: replace spectator check by more correct playerhandler check
		if(isAlive local.p && local.p.dmteam != "spectator" && (getcvar g_gametype == "1" || local.p.dmteam != self.dmteam))
		{
			// add
			local.li++
			local.list[local.li] = local.p
		}
	}
	
	// add bots
	for(local.i = 1; local.i <= $bot3.size; local.i++)
	{
		local.b = $bot3[local.i]
		
		if(local.b != self && isAlive local.b && (getcvar g_gametype == "1" || local.b.dmteam != self.dmteam))
		{
			// add
			local.li++
			local.list[local.li] = local.b
		}
	}

	self.enemy_list = local.list

end
/*
// enemy scoring
enemyscore local.distance local.fovdot:
	
end

// search for visible enemies
enemeysearch_by_sight:
 
 	local.MIN_DIST = 64.0 // always notice enemy if closer than this distance
 
	local.C_DIST 	= 10.0 // relative scoring importance of normalized distance
	local.C_DOT 	= 1.0  // relative scoring importance of normalized fov


	for(local.i = 1; local.i <= self.enemy_list.size; local.i++)
	{
		local.pen = self.enemy_list[local.i]
		
		local.vec = local.pen.origin - self.origin
		local.distance = vector_length local.vec
		
		if(local.distance < local.MIN_DIST)
		{
			// no other enemy can possibly score higher
			local.best_en = local.pen
			break
		}
		else if(local.distance < level.bots.farplane)
		{
			// enemy is within vision distance
			local.nvec = 1.0 / local.distance * local.vec
			local.dot = local.nvec * self.viewvector
		
			if(abs local.dot <= local.fovdot)
			{
				// enemy is within fov
				
				if(self cansee local.pen)
				{
					// totally visible
					
					// sort by score
					local.score = local.C_DIST * (1.0 - local.distance / level.bots.farplane) + local.C_DOT * local.dot / local.fovdot
					
					if(local.score > local.best_score)
					{
						local.best_en = local.pen
						local.best_score = local.score
					}
				}
			}
		}
	}

	self.botenemy = local.best_en
end
*/