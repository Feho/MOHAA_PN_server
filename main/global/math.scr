// x in degrees
sin local.x:

	if (level.PI == NIL)
		level.PI = 3.141592654

end ( sin ( local.x * level.PI / 180.0 ) )

cos local.x:

	if (level.PI == NIL)
		level.PI = 3.141592654

end ( cos ( local.x * level.PI / 180.0 ) )

tan local.x:

	if (level.PI == NIL)
		level.PI = 3.141592654

end ( tan ( local.x * level.PI / 180.0 ) )

cot local.x:
end ( 1.0 / (waitthread tan local.x) )

// inverse trigonometric functions, result in degrees
arcsin local.x:

	if (level.PI == NIL)
		level.PI = 3.141592654

end ( asin local.x * 180.0 / level.PI )

arccos local.x:

	if (level.PI == NIL)
		level.PI = 3.141592654

end ( acos local.x * 180.0 / level.PI )

arctan local.x:

	if (level.PI == NIL)
		level.PI = 3.141592654

end ( atan local.x * 180.0 / level.PI )

arccot local.x:
end ( waitthread arctan (1.0 / local.x) )

atan2 local.y local.x:

	if (level.PI == NIL)
		level.PI = 3.141592654

end ( atan2 local.y local.x * 180.0 / level.PI )

// enclosed angle by two vectors, result in degrees
enclosed_angle local.a_vector local.b_vector:

	local.vector_dot = vector_dot local.a_vector local.b_vector
	local.a_length = vector_length local.a_vector
	local.b_length = vector_length local.b_vector

	if ( (local.a_length * local.b_length) == 0.0 )
		local.deg = 0.0
	else
	{
		local.alpha = local.vector_dot / (local.a_length * local.b_length)
		local.deg = waitthread arccos local.alpha
	}

end local.deg

linear_interpolation local.a1 local.a2 local.a3 local.b1 local.b3:

	if ( (local.a3 - local.a1) == 0.0 )
		local.b2 = 0.0
	else
		local.b2 = ( (local.b3 - local.b1) / (local.a3 - local.a1) ) * (local.a2 - local.a1) + local.b1

end local.b2

// local.func 1 - degrees to radians, 2 - radians to degrees
radians local.value local.func:

	if (level.PI == NIL)
		level.PI = 3.141592654

	if (local.func == 1)
		local.result = local.value * ( level.PI / 180.0 )
	else if (local.func == 2)
		local.result = local.value * ( 180.0 / level.PI )

end local.result

// natural logarithm, Newton's method
ln local.x:

	if ( local.x < 0.0 || local.x == 0.0 || local.x == 1.0 || local.x > (6600.0 * 10000.0) )
		end 0.0

	if (level.PI == NIL)
		level.PI = 3.141592654

	local.num = local.x
	if (local.num > 6600.0)
		local.x = local.x / 10000.0

	if (local.x <= 45.0)
		local.m = 6
	else if ( local.x > 45.0 && local.x <= 90.0 )
		local.m = 5
	else if ( local.x > 90.0 && local.x <= 135.0 )
		local.m = 4
	else if (local.x > 135.0 && local.x <= 3300.0)
		local.m = 1
	else
		local.m = 0

	local.s = local.x * (waitthread powint 2.0 local.m)
	local.M = 1.0::(4.0 / local.s)
	local.step = 0

	for (local.i = 1;local.i <= 20;local.i++)
	{
		local.step++
		if (local.i == 1)
		{
			local.M_a[local.i] = (local.M[1] + local.M[2]) / 2.0
			local.M_b[local.i] = waitthread sqrt (local.M[1] * local.M[2])
		}
		else
		{
			local.M_a[local.i] = (local.M_a[local.i - 1] + local.M_b[local.i - 1]) / 2.0
			local.M_b[local.i] = waitthread sqrt (local.M_a[local.i - 1] * local.M_b[local.i - 1])
		}
	}

	if (local.M_a[local.step] > local.M_b[local.step])
		local.M_result = local.M_b[local.step]
	else
		local.M_result = local.M_a[local.step]

	local.ln2 = 0.69314718
	local.result = ( level.PI / (2.0 * local.M_result) ) - local.m * local.ln2

	if (local.num > 6600.0)
	{
		local.ln10 = 2.302585093
		local.result = local.result + 4 * local.ln10
	}

end local.result

// log10
log10 local.x:

	local.ln10 = 2.302585093
	local.result = (waitthread ln local.x) / local.ln10

end local.result

powint local.x local.n:

	if (local.n == 0.0)
		end 1.0

	local.num = local.x
	local.result = local.x
	local.step = 0

	while ( local.step < ( (abs local.n) - 1 ) )
	{
		local.result = local.result * local.num
		local.step++
	}

	if (local.n < 0.0)
		local.result = 1.0 / local.result

end local.result

// Bakhshali approximation
// indian mathematical manuscript
sqrt local.x:

	if (local.x < 0.0)
		end 0.0

	local.num = local.x

	// reducing below the accurate squares
	while ( local.num * local.num > local.x )
		local.num = 0.1 * local.num

	local.num_add = local.num

	// increasing to the environment of the accurate squares
	while ( local.num * local.num < local.x )
		local.num += local.num_add

	local.num -= local.num_add

	// more accurate approximation to the real squares
	while ( local.num * local.num < local.x )
		local.num += 0.1 * local.num_add

	local.S = local.x
	local.N = local.num
	local.divisor = 4.0 * local.N * local.N * local.N + 4.0 * local.N * local.S

	if (local.divisor == 0.0)
		end 0.0
	else
	{
		// Bakhshali approximation
		local.result = (local.N * local.N * local.N * local.N + 6.0 * local.N * local.N * local.S + local.S * local.S) / local.divisor
	}

end local.result

getanglesdiff local.startangles local.targetangles:

	local.diff = ( 0.0 0.0 0.0 )
	for (local.i = 0;local.i <= 2;local.i++)
	{
		local.diff[local.i] = waitthread getanglediff local.startangles[local.i] local.targetangles[local.i]
	}

end local.diff

getanglediff local.startangle local.targetangle:

	local.diff = local.targetangle - local.startangle
	while (local.diff < -180.0)
		local.diff += 360.0

	while (local.diff > 180.0)
		local.diff -= 360.0

end local.diff

axisrotate local.axis:

	local.alfa = vector_length local.axis
	local.normal_axis = vector_normalize local.axis

	local.sin_2 = waitthread sin (local.alfa / 2.0)
	local.cos_2 = waitthread cos (local.alfa / 2.0)

	// quaternion
	local.q0 = local.cos_2
	local.q1 = local.normal_axis[0] * local.sin_2
	local.q2 = local.normal_axis[1] * local.sin_2
	local.q3 = local.normal_axis[2] * local.sin_2

	local.R[0] = ( (local.q0 * local.q0 + local.q1 * local.q1 - local.q2 * local.q2 - local.q3 * local.q3) ( 2.0 * (local.q1 * local.q2 + local.q0 * local.q3) ) ( 2.0 * (local.q1 * local.q3 - local.q0 * local.q2) ) )
	local.R[1] = ( ( 2.0 * (local.q1 * local.q2 - local.q0 * local.q3) ) (local.q0 * local.q0 - local.q1 * local.q1 + local.q2 * local.q2 - local.q3 * local.q3) ( 2.0 * (local.q2 * local.q3 + local.q0 * local.q1) ) )
	local.R[2] = ( ( 2.0 * (local.q1 * local.q3 + local.q0 * local.q2) ) ( 2.0 * (local.q2 * local.q3 - local.q0 * local.q1) ) (local.q0 * local.q0 - local.q1 * local.q1 - local.q2 * local.q2 + local.q3 * local.q3) )

	local.fwd = self.forwardvector
	local.left = self.leftvector
	local.up = self.upvector

	local.new_fwd = ( (local.R[0][0] * local.fwd[0] + local.R[1][0] * local.fwd[1] + local.R[2][0] * local.fwd[2]) (local.R[0][1] * local.fwd[0] + local.R[1][1] * local.fwd[1] + local.R[2][1] * local.fwd[2]) (local.R[0][2] * local.fwd[0] + local.R[1][2] * local.fwd[1] + local.R[2][2] * local.fwd[2]) )
	local.new_left = ( (local.R[0][0] * local.left[0] + local.R[1][0] * local.left[1] + local.R[2][0] * local.left[2]) (local.R[0][1] * local.left[0] + local.R[1][1] * local.left[1] + local.R[2][1] * local.left[2]) (local.R[0][2] * local.left[0] + local.R[1][2] * local.left[1] + local.R[2][2] * local.left[2]) )
	local.new_up = ( (local.R[0][0] * local.up[0] + local.R[1][0] * local.up[1] + local.R[2][0] * local.up[2]) (local.R[0][1] * local.up[0] + local.R[1][1] * local.up[1] + local.R[2][1] * local.up[2]) (local.R[0][2] * local.up[0] + local.R[1][2] * local.up[1] + local.R[2][2] * local.up[2]) )

	local.pitch = waitthread arcsin -local.new_fwd[2]
	local.yaw = waitthread atan2 local.new_fwd[1] local.new_fwd[0]
	local.roll = waitthread atan2 local.new_left[2] local.new_up[2]

	if (local.pitch == NIL)
		local.pitch = self.angles[0]

	if (local.yaw == NIL)
		local.yaw = self.angles[1]

	if (local.roll == NIL)
		local.roll = self.angles[2]

	self.angles = ( local.pitch local.yaw local.roll )

end